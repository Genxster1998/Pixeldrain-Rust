name: CI

permissions:
  contents: write

on:
  push:
    branches: [ main, test ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, test ]
  release:
    types: [created]

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository universe
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev imagemagick
            # Install appimagetool manually
            wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
            chmod +x appimagetool
            sudo mv appimagetool /usr/local/bin/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install imagemagick create-dmg
          fi
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install imagemagick nsis -y
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: ./scripts/build.ps1
        shell: pwsh
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: ./scripts/build.sh
        shell: bash
      - name: Package (macOS)
        if: runner.os == 'macOS'
        run: |
          ./scripts/build.sh
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          ./scripts/build.ps1
      - name: Package (Linux)
        if: runner.os == 'Linux'
        run: |
          ./scripts/build.sh
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.target }}-artifacts
          path: |
            dist/*.dmg
            dist/*.deb
            dist/*.AppImage
            dist/*.zip
            dist/*.exe

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Gather release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -type f \( -name '*.dmg' -o -name '*.zip' -o -name '*.exe' -o -name '*.app' -o -name '*.tar.gz' -o -name '*.AppImage' -o -name '*.deb' -o -name '*.rpm' \) -exec cp {} release-assets/ \;
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 